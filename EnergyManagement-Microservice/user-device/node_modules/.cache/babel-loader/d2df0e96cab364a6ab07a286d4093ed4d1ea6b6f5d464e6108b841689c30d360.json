{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crist\\\\Desktop\\\\DS\\\\DS2024_30444_Giurgiu_Anca_1\\\\user-device\\\\src\\\\components\\\\device-component\\\\ModalEditDevice.js\",\n  _s = $RefreshSig$();\nimport '../../styles/ModalAdd.css';\nimport { updateDevice } from '../../services/device_service';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ModalEditDevice({\n  closeModalEdit,\n  updateDeviceInList,\n  descriptionText,\n  addressText,\n  maxHourlyConsumptionText\n}) {\n  _s();\n  const [address, setAddress] = useState('');\n  const [maxHourlyConsumption, setMaxHourlyConsumption] = useState('');\n  const [addressError, setAddressError] = useState('');\n  const [isValid, setIsValid] = useState(true);\n  useEffect(() => {\n    setAddress(addressText);\n    setMaxHourlyConsumption(maxHourlyConsumptionText);\n  }, [descriptionText, addressText, maxHourlyConsumptionText]);\n  const validateAddress = addr => {\n    const addressRegex = /^(?=.*[a-zA-Z])(?=.*\\d)/; // Trebuie să conțină litere și cel puțin o cifră\n    return addressRegex.test(addr);\n  };\n  const handleValidation = () => {\n    let valid = true;\n    if (!validateAddress(address)) {\n      setAddressError('Address must contain letters and at least one number.');\n      valid = false;\n    } else {\n      setAddressError('');\n    }\n    setIsValid(valid);\n    return valid;\n  };\n  async function handleUpdateDevice() {\n    if (!handleValidation()) {\n      return; // Opriți procesul de actualizare dacă validarea eșuează\n    }\n    const updatedDevice = {\n      descriptionText,\n      address,\n      maxHourlyConsumption\n    };\n    try {\n      const result = await updateDevice(descriptionText, address, maxHourlyConsumption);\n      if (result === \"Device updated!\") {\n        console.log(\"Device edited successfully!\");\n        updateDeviceInList(updatedDevice);\n        closeModalEdit(); // Close modal on success\n      } else {\n        alert(`Error: ${result}`);\n      }\n    } catch (error) {\n      console.error(\"Failed to edit device:\", error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"close\",\n      onClick: closeModalEdit,\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: descriptionText,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: address,\n        onChange: e => setAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), addressError && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red'\n        },\n        children: addressError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Maximum hourly energy consumption (kW):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: maxHourlyConsumption,\n        onChange: e => setMaxHourlyConsumption(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: handleUpdateDevice,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(ModalEditDevice, \"KJAYg49NRFAyT6s7enqgn6SuxP0=\");\n_c = ModalEditDevice;\nexport default ModalEditDevice;\nvar _c;\n$RefreshReg$(_c, \"ModalEditDevice\");","map":{"version":3,"names":["updateDevice","useState","useEffect","jsxDEV","_jsxDEV","ModalEditDevice","closeModalEdit","updateDeviceInList","descriptionText","addressText","maxHourlyConsumptionText","_s","address","setAddress","maxHourlyConsumption","setMaxHourlyConsumption","addressError","setAddressError","isValid","setIsValid","validateAddress","addr","addressRegex","test","handleValidation","valid","handleUpdateDevice","updatedDevice","result","console","log","alert","error","className","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","readOnly","onChange","e","target","style","color","type","_c","$RefreshReg$"],"sources":["C:/Users/crist/Desktop/DS/DS2024_30444_Giurgiu_Anca_1/user-device/src/components/device-component/ModalEditDevice.js"],"sourcesContent":["import '../../styles/ModalAdd.css';\r\nimport { updateDevice } from '../../services/device_service';\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction ModalEditDevice({ closeModalEdit, updateDeviceInList, descriptionText, addressText, maxHourlyConsumptionText}) {\r\n\r\n    const [address, setAddress] = useState('');\r\n    const [maxHourlyConsumption, setMaxHourlyConsumption] = useState('');\r\n\r\n\r\n    const [addressError, setAddressError] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setAddress(addressText);\r\n        setMaxHourlyConsumption(maxHourlyConsumptionText);\r\n    }, [descriptionText, addressText, maxHourlyConsumptionText]);\r\n\r\n\r\n    const validateAddress = (addr) => {\r\n        const addressRegex = /^(?=.*[a-zA-Z])(?=.*\\d)/; // Trebuie să conțină litere și cel puțin o cifră\r\n        return addressRegex.test(addr);\r\n    };\r\n\r\n    const handleValidation = () => {\r\n        let valid = true;\r\n\r\n        if (!validateAddress(address)) {\r\n            setAddressError('Address must contain letters and at least one number.');\r\n            valid = false;\r\n        } else {\r\n            setAddressError('');\r\n        }\r\n\r\n        setIsValid(valid);\r\n        return valid;\r\n    };\r\n\r\n\r\n    async function handleUpdateDevice() {\r\n        if (!handleValidation()) {\r\n            return; // Opriți procesul de actualizare dacă validarea eșuează\r\n        }\r\n        const updatedDevice = {\r\n                descriptionText,\r\n                address,\r\n                maxHourlyConsumption,\r\n            };\r\n        try {\r\n            const result = await updateDevice(descriptionText,address,maxHourlyConsumption);\r\n            if (result===\"Device updated!\") {\r\n                console.log(\"Device edited successfully!\");\r\n                updateDeviceInList(updatedDevice);\r\n                closeModalEdit();  // Close modal on success\r\n            } else {\r\n                alert(`Error: ${result}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Failed to edit device:\", error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='modal'>\r\n        <span id=\"close\" onClick={closeModalEdit}>&times;</span>\r\n        <div className=\"modal-content\">\r\n        <h2>Edit device</h2>\r\n            <label>Description:</label>\r\n            <input value={descriptionText} readOnly></input>\r\n            <label>Address:</label>\r\n            <input value={address} onChange={(e) => setAddress(e.target.value)}></input>\r\n            {addressError && <div style={{ color: 'red' }}>{addressError}</div>}\r\n            <label>Maximum hourly energy consumption (kW):</label>\r\n            <input type=\"number\" value={maxHourlyConsumption} onChange={(e) => setMaxHourlyConsumption(e.target.value)}></input>\r\n            <button  type='submit' onClick={handleUpdateDevice}>Edit</button>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ModalEditDevice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}